class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> ans = new ArrayList<>();
        if(k == 0)
            return ans;
        Map<Integer,Integer> hm = new HashMap<>();
        for(int i=0;i<nums.length;i++)
            hm.put(nums[i],hm.getOrDefault(nums[i],0)+1);
        Map<Integer,List<Integer>> buckets = new HashMap<>();
        for(Integer g:hm.keySet()){
            if(buckets.containsKey(hm.get(g))){
                List<Integer> numbers = buckets.get(hm.get(g));
                numbers.add(g);
                buckets.put(hm.get(g),numbers);
            }
            else{
                List<Integer> numbers = new ArrayList<>();
                numbers.add(g);
                buckets.put(hm.get(g),numbers);
            }
        }
        MyComparator mc = new MyComparator(buckets);
        Map<Integer,List<Integer>> tree = new TreeMap(mc);
        tree.putAll(buckets);
        System.out.println(tree);
        Iterator it = tree.entrySet().iterator();
        while(it.hasNext()){
            Map.Entry pair = (Map.Entry)it.next();
            int key = (int)pair.getKey();
            List<Integer> mylist = (List<Integer>)pair.getValue();
            for(int i=0;i<mylist.size();i++){
                ans.add(mylist.get(i));
                k-=1;
                if(k == 0)
                    return ans;
            }
        }
        return null;
    }
}
    
class MyComparator implements Comparator<Integer>{
        Map<Integer,List<Integer>> map;
        public MyComparator(Map<Integer,List<Integer>> buckets){
            this.map = buckets;
        }
        
        public int compare(Integer a,Integer b){
            if(a>=b)
                return -1;
            else
                return 1;
        }
    }
