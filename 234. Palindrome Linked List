/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 // idea is to reverse second half of the list and then iterate through two halves in asc order ans check if they are same
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null)
            return true;
        int len = 0,len2=0;
        ListNode counter = head;
        while(counter!=null)
        {
            len++;
            counter = counter.next;
        }
        boolean skip = len%2 == 0 ? false : true;
        len = len/2;
        len2 = len;
        ListNode runner = head;
        while(len>1){
            runner = runner.next;
            len--;
        }
        if(skip == true){
            runner.next = reverse(runner.next.next);
        }
        else{
            runner.next = reverse(runner.next);
        }
        ListNode l1 = head, l2 = runner.next;
        while(len2 > 0){
            if(l1.val!=l2.val)
                return false;
            l1 = l1.next;
            l2 = l2.next;
            len2 --;
        }
        return true;    
    }
    
    public ListNode reverse(ListNode l1){
        if(l1==null) return l1;
        ListNode prev = null, curr = null, next = null;
        curr = l1;
        next = curr.next;
        while(curr!=null){
            curr.next = prev;
            prev = curr;
            curr = next;
            if(curr!=null)
                next = curr.next;
        }
        
        return prev;
        
    }
}
